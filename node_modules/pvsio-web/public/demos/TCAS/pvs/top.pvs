top : THEORY
BEGIN

  IMPORTING Units,        % Unit conversion functions
            TCAS_tables,  % TCAS threshold tables
            TCAS_tau,     % Definition of tau and TCPA
            TCAS_2D,      % 2-D alerting logic
            TCAS_2Ds,     % Sound variant to 2-D logic
            TCAS_safety,  % Safety properties
            TCAS_tcoa,TCAS_Z,Util,TCAS_TA,TCAS_RA,TCAS,
	    Extra, Bands
            
    time: TYPE = real

    TRK_Triple: TYPE = [# range: [real, real], color: Color #]
    TRK_BAND: TYPE = list[TRK_Triple]
    clearBands: TRK_BAND = (: :)
    test_trkBand: TRK_BAND =
    		  (: (# range := ( -6, 0), color := Red #),
    		     (# range := ( 2, 6), color := Red #),
		     (# range := ( 0, 0.3), color := Yellow #) :)

    pos2D(p:Vect2): Position = (p`x,p`y,0)
    CONVERSION pos2D



    to_rad(deg: real): real = deg * pi / 180

    maxDeg: real = 360
    minDeg: real = -360
    step: nat = 36

    find_trk(deg: subrange(minDeg,maxDeg), trkBand: TRK_BAND)
    	    (so: Vect2, vo: Nz_vect2, si: Vect2, vi: Nz_vect2): TRK_BAND =
     LET vi = mk_velocity(deg,gsi,0),
         tcas_ta = TCAS_TA?(so,vo,si,vi),
	 tcas_ra = TCAS_RA?(so,vo,si,vi) IN
	 IF tcas_ta AND tcas_ra THEN (: (# range := (to_rad(deg), to_rad(deg+step)), color := Red #) :)
	 ELSIF tcas_ta AND NOT tcas_ra THEN (: (# range := (to_rad(deg), to_rad(deg+step)), color := Yellow #) :)
	 ELSE (: (# range := (to_rad(deg), to_rad(deg+step)), color := None #) :) ENDIF

    find_trk_recursive_aux
	    (deg: subrange(minDeg,maxDeg), trkBand: TRK_BAND)
    	    (so: Vect2, vo: Nz_vect2, si: Vect2, vi: Nz_vect2): RECURSIVE TRK_BAND =
     LET trkBand: TRK_BAND = trkBand o find_trk(deg, trkBand)(so,vo,si,vi)
      IN IF deg <= minDeg THEN trkBand
         ELSE find_trk_recursive_aux(deg - step, trkBand)(so,vo,si,vi) ENDIF
    MEASURE deg

    find_trk_recursive
    	    (so: Vect2, vo: Nz_vect2, si: Vect2, vi: Nz_vect2): TRK_BAND = 
      find_trk_recursive_aux(maxDeg, clearBands)(so, vo, si, vi)



    state: TYPE = [#    
       % ownship's position and velocity
       so : Vect2,
       vo : Nz_vect2,
       % intruder's position and velocity
       si : Vect2,
       vi : Nz_vect2,
       % TCAS configuration
       SL  : SensitivityLevel,
       Tau : {x: real | x = tau(so-si,vo-vi)}, % time
       TAU : {x: real | x = TA_thr(SL,TAU)}, % threshold
       TCPA: {x: real | x = tcpa(so - si, vo - vi)}, % time closest point of approach
       Converging: {x: bool | converging?(so - si)(vo - vi)},
       Range: {x: real | x = range(so - si) / nmi},
       DMOD: {x: real | x = TA_thr(SL, DMOD) / nmi}, % distance modification
       t: time,
       TA: bool, % traffic alert
       trkBand: TRK_BAND
    #]




    init(t0: time): state = 
      LET so_: Vect2 = (0,0),
          vo_: Nz_vect2 = (0,600*knt),
          si_: Vect2 = (-54171/40,78247/40),
          vi_: Nz_vect2 = (-463/3,463/3),
	  SL_: SensitivityLevel = 8 IN (#
       % ownship's position and velocity
       so := so_,
       vo := vo_,
       % intruder's position and velocity
       si := si_,
       vi := vi_,
       % TCAS configuration
       SL  := SL_,
       Tau := tau(so_ - si_,vo_ - vi_),
       TAU := TA_thr(SL_,TAU),
       TCPA:= tcpa(so_ - si_, vo_ - vi_),
       Converging:= converging?(so_ - si_)(vo_ - vi_),
       Range:= range(so_ - si_) / nmi,
       DMOD := TA_thr(SL_, DMOD) / nmi,
       t  := t0,
       TA := TCAS_2D[TCAS_tables.TA_thr].TCAS_2D?(SL_, so_ + t0 * vo_, vo_, si_ + t0 * vi_, vi_),
       trkBand := clearBands
    #)

    % tick is used to execute a simulation step; each simulation step automatically advances time of deltaT virtual seconds
    deltaT: real = 0.5;
    tick(st: state): state =
      LET so_: Vect2 = so(st) + deltaT * vo(st),
          si_: Vect2 = si(st) + deltaT * vi(st),
	  t_ : real  = t(st)  + deltaT
       IN st WITH [ so := so_,
       	     	    si := si_,
       	     	    Tau := tau(so_ - si_,vo(st) - vi(st)),
       		    TAU := TA_thr(SL(st),TAU),
       		    TCPA:= tcpa(so_ - si_, vo(st) - vi(st)),
       		    Converging:= converging?(so_ - si_)(vo(st) - vi(st)),
		    Range:= range(so_ - si_) / nmi,
       		    DMOD := TA_thr(SL(st), DMOD) / nmi,
       		    t  := t_,
       		    TA := TCAS_2D[TCAS_tables.TA_thr].TCAS_2D?(SL(st), so_, vo(st), si_, vi(st)),
		    trkBand := find_trk_recursive(so(st), vo(st), si(st), vi(st)) ]

    ntick(n: nat)(st:state): RECURSIVE state = 
        if( n = 0) then st
	else let new_st = tick(st) in ntick(n-1)(new_st) endif
      measure n
    
    click_tick(st: state): state = tick(st)

    % click_speedUP/click_slowDOWN can be used to increase and decrease the ownship's speed
    deltaV: real = 0.1
    click_speedUPx(st: state): state =
      st WITH [ vo := (vo(st)`x + deltaV, vo(st)`y) ]
    click_speedUPy(st: state): state =
      st WITH [ vo := (vo(st)`x, vo(st)`y + deltaV) ]
    click_slowDOWNx(st: state): state =
      IF vo(st)`x - deltaV >= 0 THEN st WITH [ vo := (vo(st)`x - deltaV, vo(st)`y) ] ELSE st ENDIF
    click_slowDOWNy(st: state): state =
      IF vo(st)`y - deltaV >= 0 THEN st WITH [ vo := (vo(st)`x, vo(st)`y - deltaV) ] ELSE st ENDIF

    %--  EXAMPLES  -------------------------------------------------------------------
    example_0: state = init(0)
    example_1: state = tick(init(0))
    example_2: state = ntick(2)(init(0))
    example_n(n:nat): state = ntick(n)(init(0))    
      
END top
